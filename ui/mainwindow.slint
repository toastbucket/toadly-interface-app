component PieChartBackground inherits Path {
    in property <float> thickness;
    in property <float> inner-radius;

    fill: #aaaaaa40;

    viewbox-width: 100;
    viewbox-height: 100;

    MoveTo {
        x: 50;
        y: 0;
    }
    ArcTo {
        radius-x: 50;
        radius-y: 50;
        x: 50;
        y: 100;
        sweep: true;
    }
    ArcTo {
        radius-x: 50;
        radius-y: 50;
        x: 50;
        y: 0;
        sweep: true;
    }
    LineTo {
        x: 50;
        y: root.thickness;
    }
    ArcTo {
        radius-x: root.inner-radius;
        radius-y: root.inner-radius;
        x: 50;
        y: 100 - root.thickness;
    }
    ArcTo {
        radius-x: root.inner-radius;
        radius-y: root.inner-radius;
        x: 50;
        y: root.thickness;
    }
}

component PieChartFill inherits Path {
    in property <float> thickness;
    in property <float> inner-radius;
    in property <float> progress;
    in property <float> start : 0;

    viewbox-width: 100;
    viewbox-height: 100;

    MoveTo {
        y: 50 - 50 * cos(-root.start * 360deg);
        x: 50 - 50 * sin(-root.start * 360deg);
    }

    LineTo {
        y: 50 - root.inner-radius * cos(-root.start * 360deg);
        x: 50 - root.inner-radius * sin(-root.start * 360deg);
    }

    ArcTo {
        radius-x: root.inner-radius;
        radius-y: root.inner-radius;
        y: 50 - root.inner-radius*cos(-(root.start + root.progress) * 360deg);
        x: 50 - root.inner-radius*sin(-(root.start + root.progress) * 360deg);
        sweep: root.progress > 0;
        large-arc: root.progress > 0.5;
    }

    LineTo {
        y: 50 - 50*cos(-(root.start + root.progress) * 360deg);
        x: 50 - 50*sin(-(root.start + root.progress) * 360deg);
    }

    ArcTo {
        radius-x: 50;
        radius-y: 50;
        y: 50 - 50 * cos(-root.start * 360deg);
        x: 50 - 50 * sin(-root.start * 360deg);
        sweep: root.progress < 0;
        large-arc: root.progress > 0.5;
    }

    LineTo {
        y: 50 - 50 * cos(-root.start * 360deg);
        x: 50 - 50 * sin(-root.start * 360deg);
    }
}

component PieChartPainted inherits Rectangle {
    in property <brush> brush <=> p.fill;
    in property <float> progress;
    in property <float> thickness: 15;
    in property <float> inner-radius: 50 - root.thickness;

    back := PieChartBackground {
        width: 100%;
        height: 100%;
        thickness: root.thickness;
        inner-radius: root.inner-radius;
    }

    p := PieChartFill {
        width: 100%;
        height: 100%;
        thickness: root.thickness;
        inner-radius: root.inner-radius;
        progress: root.progress;
    }
}

component Gauge {
    in property <brush> brush <=> chart.brush;
    in property <float> value;
    in property <float> max-value;
    in property <string> unit;

    chart := PieChartPainted {
        progress: value > max-value ? 0.9999 : value / max-value;

        Text {
            width: 100%;
            height: 100%;
            vertical-alignment: center;
            horizontal-alignment: center;
            text: round(value) + unit;
            font-weight: 650;
        }
    }

    if value > max-value : PieChartFill {
        width: 100%;
        height: 100%;
        thickness: chart.thickness;
        inner-radius: chart.inner-radius;
        progress: value - max-value < 1.0 ? mod(value, max-value) / max-value : 1.0;
        fill: @linear-gradient(0deg, #ff5c00, #ff3122);
    }
}

component BatteryLevel inherits Rectangle {
    background: transparent;
    height: self.width * 0.667;

    in property <float> level;
    in property <float> voltage;
    in property <bool> show-voltage: false;

    left_receptacle := Rectangle {
        background: gray;
        x: parent.width * 10%;
        y: 0px;
        width: parent.width * 0.1;
        height: self.width / 2;
        border-top-right-radius: 2px;
        border-top-left-radius: 2px;
    }

    right_receptacle := Rectangle {
        background: gray;
        x: (parent.width * 90%) - self.width;
        y: 0px;
        width: parent.width * 0.1;
        height: self.width / 2;
        border-top-right-radius: 2px;
        border-top-left-radius: 2px;
    }

    Rectangle {
        background: gray;
        y: left_receptacle.height;
        height: parent.height - left_receptacle.height;
        border-radius: 2px;

        if !show-voltage : Rectangle {
            y: parent.height - self.height;
            width: parent.width;
            height: parent.height * level;
            border-radius: parent.border-radius;

            states [
                good when level > 40%: {
                    background: mediumaquamarine;
                }
                ok when level > 20%: {
                    background: gold;
                }
                low when level < 20%: {
                    background: firebrick;
                }
            ]
        }
    }

    Text {
        text: show-voltage ?
            "\{floor(voltage)}.\{floor(mod(voltage, 1) * 10)}V"
            : "\{abs(round(level * 100))}%";
        font-size: parent.width * 0.25;
        font-weight: 650;
    }
}

component WaterLevel inherits VerticalLayout {
    alignment: stretch;
    spacing: 5px;

    in property <float> level;
    in property <bool> good-when-full: true;
    in property <string> label: "Tank Level";

    Text {
        text: label;
        font-size: 18px;
        horizontal-alignment: center;
        max-height: self.font-size;
    }

    Rectangle {
        background: gray;
        border-radius: 4px;

        Rectangle {
            y: parent.height - self.height;
            width: parent.width;
            height: parent.height * level;
            border-radius: parent.border-radius;

            states [
                full when (level > 40% && good-when-full) || (level > 80% && !good-when-full): {
                    background: good-when-full ? cornflowerblue : firebrick;
                }
                ok when (level > 20% && good-when-full) || (level > 40% && !good-when-full): {
                    background: gold;
                }
                empty when (level < 20% && good-when-full) || (level < 40% && !good-when-full): {
                    background: good-when-full ? firebrick : cornflowerblue;
                }
            ]
        }

        Text {
            text: "\{abs(round(level * 100))}%";
            font-size: 22px;
            font-weight: 650;
        }
    }
}

export component MainWindow inherits Window {
    title: "Toadly Interface";
    width: 800px;
    height: 480px;

    in property <float> fresh_tank_level;
    in property <float> grey_tank_level;
    in property <float> house_batt_level;
    in property <float> truck_batt_voltage;

    in property <float> inverter_value;
    in property <float> solar_value;

    HorizontalLayout {
        padding: 15px;
        spacing: 10px;

        Rectangle {
            BatteryLevel {
                x: (parent.width * 50%) - (self.width * 50%);
                y: (parent.height * 30%) - (self.height * 50%);
                width: 180px;
                level: house_batt_level;
            }

            BatteryLevel {
                x: (parent.width * 50%) - (self.width * 50%);
                y: (parent.height * 70%) - (self.height * 50%);
                //y: housebatt.y + ((parent.y - housebatt.y) / 2) - (self.height / 2);
                width: 100px;
                voltage: truck_batt_voltage;
                show-voltage: true;
            }

            Text {
                x: (parent.width * 15%) - (self.width * 50%);
                y: solargauge.y - self.height - 10px;

                text: "Solar";
                font-size: 18px;
            }

            solargauge := Gauge {
                x: (parent.width * 15%) - (self.width * 50%);
                y: (parent.height * 70%) - (self.height * 50%);
                height: 100px;
                width: 100px;

                brush: @linear-gradient(0deg, #6776ff, #6100ff);
                value: solar-value;
                max-value: 200;
                unit: "W";
            }

            Text {
                x: (parent.width * 85%) - (self.width * 50%);
                y: invertergauge.y - self.height - 10px;

                text: "Inverter";
                font-size: 18px;
            }

            invertergauge := Gauge {
                x: (parent.width * 85%) - (self.width * 50%);
                y: (parent.height * 70%) - (self.height * 50%);
                height: 100px;
                width: 100px;

                brush: @linear-gradient(0deg, #6776ff, #6100ff);
                value: inverter-value;
                max-value: 800;
                unit: "W";
            }
        }

        WaterLevel {
            height: parent.height - (parent.padding * 2);
            width: self.height * 0.4;
            level: grey_tank_level;
            good-when-full: false;
            label: "Grey Water Level";
        }

        WaterLevel {
            height: parent.height - (parent.padding * 2);
            width: self.height * 0.4;
            level: fresh_tank_level;
            label: "Fresh Water Level";
        }
   }
}
